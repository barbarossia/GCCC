# ========================================
# GCCC API Gateway Nginx配置
# ========================================

# 上游后端服务
upstream gccc_backend {
    server gccc-backend:3000;
    # 添加更多后端实例以实现负载均衡
    # server gccc-backend-2:3000;
}

# HTTP服务器配置
server {
    listen 80;
    server_name api.gccc.local localhost;

    # 安全头部
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # 日志配置
    access_log /var/log/nginx/gccc_access.log;
    error_log /var/log/nginx/gccc_error.log;

    # Gzip压缩
    gzip on;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # API路由
    location /api/ {
        # 移除 /api 前缀
        rewrite ^/api/(.*) /$1 break;
        
        proxy_pass http://gccc_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # 超时设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓存设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # 健康检查
    location /health {
        proxy_pass http://gccc_backend/health;
        access_log off;
    }

    # WebSocket支持 (如果需要)
    location /ws/ {
        proxy_pass http://gccc_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 静态文件 (如果API服务器提供静态文件)
    location /static/ {
        proxy_pass http://gccc_backend;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # 默认重定向到API文档
    location = / {
        return 301 /api/docs;
    }

    # 错误页面
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS服务器配置 (生产环境)
server {
    listen 443 ssl http2;
    server_name api.gccc.com;  # 替换为实际域名

    # SSL证书配置
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HSTS安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # 其他配置与HTTP服务器相同
    include /etc/nginx/conf.d/common_locations.conf;
}

# HTTP重定向到HTTPS (生产环境)
server {
    listen 80;
    server_name api.gccc.com;  # 替换为实际域名
    return 301 https://$server_name$request_uri;
}
