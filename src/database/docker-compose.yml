version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - gccc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

#  redis:
#    image: redis:latest
#    container_name: ${COMPOSE_PROJECT_NAME}-redis
#    restart: unless-stopped
#    ports:
#      - "${REDIS_PORT}:6379"
#    volumes:
#      - redis_data:/data
#      - ./redis.conf:/usr/local/etc/redis/redis.conf
#    networks:
#      - gccc-network
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  adminer:
    image: adminer:latest
    container_name: ${COMPOSE_PROJECT_NAME}-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - gccc-network
    depends_on:
      - postgres
    profiles:
      - admin

volumes:
  postgres_data:
#  redis_data:

networks:
  gccc-network:
    driver: bridge
    name: ${DOCKER_NETWORK}
